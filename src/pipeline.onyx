package http.server

Pipeline :: struct {
    steps: [..] Pipe;

    free    :: pipeline_free
    add     :: pipeline_add_step
    pipe    :: pipeline_add_step
    process :: pipeline_process
}

Pipe :: struct {
    handler: (data: rawptr, req: &Request, res: &Response) -> void;
    data: rawptr;

    execute_after_request := false;
}

pipeline :: () -> Pipeline {
    p: Pipeline;
    p.steps = make(typeof p.steps, allocator=long_term_allocator);
    return p;
}

#package
pipeline_free :: (p: &Pipeline) -> &Pipeline {
    delete(&p.steps);
    return p
}

#package
pipeline_add_step :: #match #local {}

#overload
pipeline_add_step :: (p: &Pipeline, s: HTTP_Handler) -> &Pipeline {
    step := Pipeable.as_pipe(s);
    p.steps << step;
    return p
}

#overload
pipeline_add_step :: (p: &Pipeline, s: $T/Pipeable) -> &Pipeline {
    step := Pipeable.as_pipe(s);
    p.steps << step;
    return p
}

#overload
pipeline_add_step :: (p: &Pipeline, pipe: Pipe) -> &Pipeline {
    p.steps << pipe;
    return p
}

#package
pipeline_process :: (p: &Pipeline, req: &Request, res: &Response) {
    for& p.steps {
        if !res.completed || it.execute_after_request {
            it.handler(it.data, req, res);
        }
    }
    return;
}


Pipeable :: interface (T: type_expr) {
    t as T;

    { as_pipe(t) } -> Pipe;

    as_pipe :: #match {}
}


#overload
Pipeable.as_pipe :: macro (p: &Pipeline) => Pipe.{pipeline_process, p};

#overload
Pipeable.as_pipe :: macro (h: HTTP_Handler) => {
    handler :: (f: &HTTP_Handler, req: &Request, res: &Response) {
        (*f)(req, res);
    }

    f := new(typeof h, allocator=long_term_allocator);
    *f = alloc.copy_closure(h, long_term_allocator);
    return Pipe.{ handler, f };
}
